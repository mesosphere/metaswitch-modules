// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network_isolator {

namespace {

const ::google::protobuf::Descriptor* IPAMRequestIPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMRequestIPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPAMRequestIPMessage_Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMRequestIPMessage_Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPAMReserveIPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMReserveIPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPAMReserveIPMessage_Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMReserveIPMessage_Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPAMReleaseIPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMReleaseIPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPAMReleaseIPMessage_Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMReleaseIPMessage_Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPAMResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAMResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorIsolateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorIsolateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorIsolateMessage_Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorIsolateMessage_Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorCleanupMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorCleanupMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorCleanupMessage_Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorCleanupMessage_Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorMessage_Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorMessage_Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsolatorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsolatorResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_interface_2eproto() {
  protobuf_AddDesc_interface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "interface.proto");
  GOOGLE_CHECK(file != NULL);
  IPAMRequestIPMessage_descriptor_ = file->message_type(0);
  static const int IPAMRequestIPMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage, args_),
  };
  IPAMRequestIPMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMRequestIPMessage_descriptor_,
      IPAMRequestIPMessage::default_instance_,
      IPAMRequestIPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMRequestIPMessage));
  IPAMRequestIPMessage_Args_descriptor_ = IPAMRequestIPMessage_descriptor_->nested_type(0);
  static const int IPAMRequestIPMessage_Args_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, num_ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, num_ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, netgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, labels_),
  };
  IPAMRequestIPMessage_Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMRequestIPMessage_Args_descriptor_,
      IPAMRequestIPMessage_Args::default_instance_,
      IPAMRequestIPMessage_Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMRequestIPMessage_Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMRequestIPMessage_Args));
  IPAMReserveIPMessage_descriptor_ = file->message_type(1);
  static const int IPAMReserveIPMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage, args_),
  };
  IPAMReserveIPMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMReserveIPMessage_descriptor_,
      IPAMReserveIPMessage::default_instance_,
      IPAMReserveIPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMReserveIPMessage));
  IPAMReserveIPMessage_Args_descriptor_ = IPAMReserveIPMessage_descriptor_->nested_type(0);
  static const int IPAMReserveIPMessage_Args_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, ipv4_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, ipv6_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, netgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, labels_),
  };
  IPAMReserveIPMessage_Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMReserveIPMessage_Args_descriptor_,
      IPAMReserveIPMessage_Args::default_instance_,
      IPAMReserveIPMessage_Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReserveIPMessage_Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMReserveIPMessage_Args));
  IPAMReleaseIPMessage_descriptor_ = file->message_type(2);
  static const int IPAMReleaseIPMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage, args_),
  };
  IPAMReleaseIPMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMReleaseIPMessage_descriptor_,
      IPAMReleaseIPMessage::default_instance_,
      IPAMReleaseIPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMReleaseIPMessage));
  IPAMReleaseIPMessage_Args_descriptor_ = IPAMReleaseIPMessage_descriptor_->nested_type(0);
  static const int IPAMReleaseIPMessage_Args_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage_Args, ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage_Args, uid_),
  };
  IPAMReleaseIPMessage_Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMReleaseIPMessage_Args_descriptor_,
      IPAMReleaseIPMessage_Args::default_instance_,
      IPAMReleaseIPMessage_Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage_Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMReleaseIPMessage_Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMReleaseIPMessage_Args));
  IPAMResponse_descriptor_ = file->message_type(3);
  static const int IPAMResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMResponse, ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMResponse, ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMResponse, error_),
  };
  IPAMResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAMResponse_descriptor_,
      IPAMResponse::default_instance_,
      IPAMResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAMResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAMResponse));
  IsolatorIsolateMessage_descriptor_ = file->message_type(4);
  static const int IsolatorIsolateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage, args_),
  };
  IsolatorIsolateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorIsolateMessage_descriptor_,
      IsolatorIsolateMessage::default_instance_,
      IsolatorIsolateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorIsolateMessage));
  IsolatorIsolateMessage_Args_descriptor_ = IsolatorIsolateMessage_descriptor_->nested_type(0);
  static const int IsolatorIsolateMessage_Args_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, ipv4_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, ipv6_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, netgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, labels_),
  };
  IsolatorIsolateMessage_Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorIsolateMessage_Args_descriptor_,
      IsolatorIsolateMessage_Args::default_instance_,
      IsolatorIsolateMessage_Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorIsolateMessage_Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorIsolateMessage_Args));
  IsolatorCleanupMessage_descriptor_ = file->message_type(5);
  static const int IsolatorCleanupMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage, args_),
  };
  IsolatorCleanupMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorCleanupMessage_descriptor_,
      IsolatorCleanupMessage::default_instance_,
      IsolatorCleanupMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorCleanupMessage));
  IsolatorCleanupMessage_Args_descriptor_ = IsolatorCleanupMessage_descriptor_->nested_type(0);
  static const int IsolatorCleanupMessage_Args_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage_Args, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage_Args, container_id_),
  };
  IsolatorCleanupMessage_Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorCleanupMessage_Args_descriptor_,
      IsolatorCleanupMessage_Args::default_instance_,
      IsolatorCleanupMessage_Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage_Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorCleanupMessage_Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorCleanupMessage_Args));
  IsolatorMessage_descriptor_ = file->message_type(6);
  static const int IsolatorMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage, args_),
  };
  IsolatorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorMessage_descriptor_,
      IsolatorMessage::default_instance_,
      IsolatorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorMessage));
  IsolatorMessage_Args_descriptor_ = IsolatorMessage_descriptor_->nested_type(0);
  static const int IsolatorMessage_Args_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, ipv4_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, ipv6_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, netgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, labels_),
  };
  IsolatorMessage_Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorMessage_Args_descriptor_,
      IsolatorMessage_Args::default_instance_,
      IsolatorMessage_Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorMessage_Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorMessage_Args));
  IsolatorResponse_descriptor_ = file->message_type(7);
  static const int IsolatorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorResponse, error_),
  };
  IsolatorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsolatorResponse_descriptor_,
      IsolatorResponse::default_instance_,
      IsolatorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolatorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsolatorResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_interface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMRequestIPMessage_descriptor_, &IPAMRequestIPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMRequestIPMessage_Args_descriptor_, &IPAMRequestIPMessage_Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMReserveIPMessage_descriptor_, &IPAMReserveIPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMReserveIPMessage_Args_descriptor_, &IPAMReserveIPMessage_Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMReleaseIPMessage_descriptor_, &IPAMReleaseIPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMReleaseIPMessage_Args_descriptor_, &IPAMReleaseIPMessage_Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAMResponse_descriptor_, &IPAMResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorIsolateMessage_descriptor_, &IsolatorIsolateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorIsolateMessage_Args_descriptor_, &IsolatorIsolateMessage_Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorCleanupMessage_descriptor_, &IsolatorCleanupMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorCleanupMessage_Args_descriptor_, &IsolatorCleanupMessage_Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorMessage_descriptor_, &IsolatorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorMessage_Args_descriptor_, &IsolatorMessage_Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsolatorResponse_descriptor_, &IsolatorResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_interface_2eproto() {
  delete IPAMRequestIPMessage::default_instance_;
  delete IPAMRequestIPMessage_reflection_;
  delete IPAMRequestIPMessage::_default_command_;
  delete IPAMRequestIPMessage_Args::default_instance_;
  delete IPAMRequestIPMessage_Args_reflection_;
  delete IPAMReserveIPMessage::default_instance_;
  delete IPAMReserveIPMessage_reflection_;
  delete IPAMReserveIPMessage::_default_command_;
  delete IPAMReserveIPMessage_Args::default_instance_;
  delete IPAMReserveIPMessage_Args_reflection_;
  delete IPAMReleaseIPMessage::default_instance_;
  delete IPAMReleaseIPMessage_reflection_;
  delete IPAMReleaseIPMessage::_default_command_;
  delete IPAMReleaseIPMessage_Args::default_instance_;
  delete IPAMReleaseIPMessage_Args_reflection_;
  delete IPAMResponse::default_instance_;
  delete IPAMResponse_reflection_;
  delete IsolatorIsolateMessage::default_instance_;
  delete IsolatorIsolateMessage_reflection_;
  delete IsolatorIsolateMessage::_default_command_;
  delete IsolatorIsolateMessage_Args::default_instance_;
  delete IsolatorIsolateMessage_Args_reflection_;
  delete IsolatorCleanupMessage::default_instance_;
  delete IsolatorCleanupMessage_reflection_;
  delete IsolatorCleanupMessage::_default_command_;
  delete IsolatorCleanupMessage_Args::default_instance_;
  delete IsolatorCleanupMessage_Args_reflection_;
  delete IsolatorMessage::default_instance_;
  delete IsolatorMessage_reflection_;
  delete IsolatorMessage::_default_command_;
  delete IsolatorMessage_Args::default_instance_;
  delete IsolatorMessage_Args_reflection_;
  delete IsolatorResponse::default_instance_;
  delete IsolatorResponse_reflection_;
}

void protobuf_AddDesc_interface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017interface.proto\022\020network_isolator\032\021mes"
    "os/mesos.proto\"\357\001\n\024IPAMRequestIPMessage\022"
    "\031\n\007command\030\001 \002(\t:\010allocate\0229\n\004args\030\002 \002(\013"
    "2+.network_isolator.IPAMRequestIPMessage"
    ".Args\032\200\001\n\004Args\022\020\n\010hostname\030\001 \002(\t\022\023\n\010num_"
    "ipv4\030\002 \002(\005:\0010\022\023\n\010num_ipv6\030\003 \002(\005:\0010\022\013\n\003ui"
    "d\030\004 \002(\t\022\021\n\tnetgroups\030\005 \003(\t\022\034\n\006labels\030\006 \003"
    "(\0132\014.mesos.Label\"\353\001\n\024IPAMReserveIPMessag"
    "e\022\030\n\007command\030\001 \002(\t:\007reserve\0229\n\004args\030\002 \002("
    "\0132+.network_isolator.IPAMReserveIPMessag"
    "e.Args\032~\n\004Args\022\020\n\010hostname\030\001 \002(\t\022\022\n\nipv4"
    "_addrs\030\002 \003(\t\022\022\n\nipv6_addrs\030\003 \003(\t\022\013\n\003uid\030"
    "\004 \002(\t\022\021\n\tnetgroups\030\005 \003(\t\022\034\n\006labels\030\006 \003(\013"
    "2\014.mesos.Label\"\215\001\n\024IPAMReleaseIPMessage\022"
    "\030\n\007command\030\001 \002(\t:\007release\0229\n\004args\030\002 \002(\0132"
    "+.network_isolator.IPAMReleaseIPMessage."
    "Args\032 \n\004Args\022\013\n\003ips\030\001 \003(\t\022\013\n\003uid\030\002 \001(\t\"9"
    "\n\014IPAMResponse\022\014\n\004ipv4\030\001 \003(\t\022\014\n\004ipv6\030\002 \003"
    "(\t\022\r\n\005error\030\003 \001(\t\"\206\002\n\026IsolatorIsolateMes"
    "sage\022\030\n\007command\030\001 \002(\t:\007isolate\022;\n\004args\030\002"
    " \002(\0132-.network_isolator.IsolatorIsolateM"
    "essage.Args\032\224\001\n\004Args\022\020\n\010hostname\030\001 \002(\t\022\024"
    "\n\014container_id\030\002 \002(\t\022\013\n\003pid\030\003 \002(\r\022\022\n\nipv"
    "4_addrs\030\004 \003(\t\022\022\n\nipv6_addrs\030\005 \003(\t\022\021\n\tnet"
    "groups\030\006 \003(\t\022\034\n\006labels\030\007 \003(\0132\014.mesos.Lab"
    "el\"\237\001\n\026IsolatorCleanupMessage\022\030\n\007command"
    "\030\001 \002(\t:\007cleanup\022;\n\004args\030\002 \002(\0132-.network_"
    "isolator.IsolatorCleanupMessage.Args\032.\n\004"
    "Args\022\020\n\010hostname\030\001 \002(\t\022\024\n\014container_id\030\002"
    " \002(\t\"\370\001\n\017IsolatorMessage\022\030\n\007command\030\001 \002("
    "\t:\007isolate\0224\n\004args\030\002 \002(\0132&.network_isola"
    "tor.IsolatorMessage.Args\032\224\001\n\004Args\022\020\n\010hos"
    "tname\030\001 \002(\t\022\024\n\014container_id\030\002 \002(\t\022\013\n\003pid"
    "\030\003 \002(\005\022\022\n\nipv4_addrs\030\004 \003(\t\022\022\n\nipv6_addrs"
    "\030\005 \003(\t\022\021\n\tnetgroups\030\006 \003(\t\022\034\n\006labels\030\007 \003("
    "\0132\014.mesos.Label\"!\n\020IsolatorResponse\022\r\n\005e"
    "rror\030\001 \001(\t", 1450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interface.proto", &protobuf_RegisterTypes);
  IPAMRequestIPMessage::_default_command_ =
      new ::std::string("allocate", 8);
  IPAMRequestIPMessage::default_instance_ = new IPAMRequestIPMessage();
  IPAMRequestIPMessage_Args::default_instance_ = new IPAMRequestIPMessage_Args();
  IPAMReserveIPMessage::_default_command_ =
      new ::std::string("reserve", 7);
  IPAMReserveIPMessage::default_instance_ = new IPAMReserveIPMessage();
  IPAMReserveIPMessage_Args::default_instance_ = new IPAMReserveIPMessage_Args();
  IPAMReleaseIPMessage::_default_command_ =
      new ::std::string("release", 7);
  IPAMReleaseIPMessage::default_instance_ = new IPAMReleaseIPMessage();
  IPAMReleaseIPMessage_Args::default_instance_ = new IPAMReleaseIPMessage_Args();
  IPAMResponse::default_instance_ = new IPAMResponse();
  IsolatorIsolateMessage::_default_command_ =
      new ::std::string("isolate", 7);
  IsolatorIsolateMessage::default_instance_ = new IsolatorIsolateMessage();
  IsolatorIsolateMessage_Args::default_instance_ = new IsolatorIsolateMessage_Args();
  IsolatorCleanupMessage::_default_command_ =
      new ::std::string("cleanup", 7);
  IsolatorCleanupMessage::default_instance_ = new IsolatorCleanupMessage();
  IsolatorCleanupMessage_Args::default_instance_ = new IsolatorCleanupMessage_Args();
  IsolatorMessage::_default_command_ =
      new ::std::string("isolate", 7);
  IsolatorMessage::default_instance_ = new IsolatorMessage();
  IsolatorMessage_Args::default_instance_ = new IsolatorMessage_Args();
  IsolatorResponse::default_instance_ = new IsolatorResponse();
  IPAMRequestIPMessage::default_instance_->InitAsDefaultInstance();
  IPAMRequestIPMessage_Args::default_instance_->InitAsDefaultInstance();
  IPAMReserveIPMessage::default_instance_->InitAsDefaultInstance();
  IPAMReserveIPMessage_Args::default_instance_->InitAsDefaultInstance();
  IPAMReleaseIPMessage::default_instance_->InitAsDefaultInstance();
  IPAMReleaseIPMessage_Args::default_instance_->InitAsDefaultInstance();
  IPAMResponse::default_instance_->InitAsDefaultInstance();
  IsolatorIsolateMessage::default_instance_->InitAsDefaultInstance();
  IsolatorIsolateMessage_Args::default_instance_->InitAsDefaultInstance();
  IsolatorCleanupMessage::default_instance_->InitAsDefaultInstance();
  IsolatorCleanupMessage_Args::default_instance_->InitAsDefaultInstance();
  IsolatorMessage::default_instance_->InitAsDefaultInstance();
  IsolatorMessage_Args::default_instance_->InitAsDefaultInstance();
  IsolatorResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_interface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_interface_2eproto {
  StaticDescriptorInitializer_interface_2eproto() {
    protobuf_AddDesc_interface_2eproto();
  }
} static_descriptor_initializer_interface_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IPAMRequestIPMessage_Args::kHostnameFieldNumber;
const int IPAMRequestIPMessage_Args::kNumIpv4FieldNumber;
const int IPAMRequestIPMessage_Args::kNumIpv6FieldNumber;
const int IPAMRequestIPMessage_Args::kUidFieldNumber;
const int IPAMRequestIPMessage_Args::kNetgroupsFieldNumber;
const int IPAMRequestIPMessage_Args::kLabelsFieldNumber;
#endif  // !_MSC_VER

IPAMRequestIPMessage_Args::IPAMRequestIPMessage_Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMRequestIPMessage_Args::InitAsDefaultInstance() {
}

IPAMRequestIPMessage_Args::IPAMRequestIPMessage_Args(const IPAMRequestIPMessage_Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMRequestIPMessage_Args::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ipv4_ = 0;
  num_ipv6_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMRequestIPMessage_Args::~IPAMRequestIPMessage_Args() {
  SharedDtor();
}

void IPAMRequestIPMessage_Args::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void IPAMRequestIPMessage_Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMRequestIPMessage_Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMRequestIPMessage_Args_descriptor_;
}

const IPAMRequestIPMessage_Args& IPAMRequestIPMessage_Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMRequestIPMessage_Args* IPAMRequestIPMessage_Args::default_instance_ = NULL;

IPAMRequestIPMessage_Args* IPAMRequestIPMessage_Args::New() const {
  return new IPAMRequestIPMessage_Args;
}

void IPAMRequestIPMessage_Args::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    num_ipv4_ = 0;
    num_ipv6_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  netgroups_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMRequestIPMessage_Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_ipv4;
        break;
      }

      // required int32 num_ipv4 = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_ipv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_ipv4_)));
          set_has_num_ipv4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_ipv6;
        break;
      }

      // required int32 num_ipv6 = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_ipv6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_ipv6_)));
          set_has_num_ipv6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // required string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_netgroups;
        break;
      }

      // repeated string netgroups = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netgroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_netgroups()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netgroups(this->netgroups_size() - 1).data(),
            this->netgroups(this->netgroups_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_netgroups;
        if (input->ExpectTag(50)) goto parse_labels;
        break;
      }

      // repeated .mesos.Label labels = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMRequestIPMessage_Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // required int32 num_ipv4 = 2 [default = 0];
  if (has_num_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_ipv4(), output);
  }

  // required int32 num_ipv6 = 3 [default = 0];
  if (has_num_ipv6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_ipv6(), output);
  }

  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }

  // repeated string netgroups = 5;
  for (int i = 0; i < this->netgroups_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->netgroups(i).data(), this->netgroups(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->netgroups(i), output);
  }

  // repeated .mesos.Label labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMRequestIPMessage_Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required int32 num_ipv4 = 2 [default = 0];
  if (has_num_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_ipv4(), target);
  }

  // required int32 num_ipv6 = 3 [default = 0];
  if (has_num_ipv6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_ipv6(), target);
  }

  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // repeated string netgroups = 5;
  for (int i = 0; i < this->netgroups_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netgroups(i).data(), this->netgroups(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->netgroups(i), target);
  }

  // repeated .mesos.Label labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMRequestIPMessage_Args::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required int32 num_ipv4 = 2 [default = 0];
    if (has_num_ipv4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_ipv4());
    }

    // required int32 num_ipv6 = 3 [default = 0];
    if (has_num_ipv6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_ipv6());
    }

    // required string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  // repeated string netgroups = 5;
  total_size += 1 * this->netgroups_size();
  for (int i = 0; i < this->netgroups_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->netgroups(i));
  }

  // repeated .mesos.Label labels = 6;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMRequestIPMessage_Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMRequestIPMessage_Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMRequestIPMessage_Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMRequestIPMessage_Args::MergeFrom(const IPAMRequestIPMessage_Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  netgroups_.MergeFrom(from.netgroups_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_num_ipv4()) {
      set_num_ipv4(from.num_ipv4());
    }
    if (from.has_num_ipv6()) {
      set_num_ipv6(from.num_ipv6());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMRequestIPMessage_Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMRequestIPMessage_Args::CopyFrom(const IPAMRequestIPMessage_Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMRequestIPMessage_Args::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  return true;
}

void IPAMRequestIPMessage_Args::Swap(IPAMRequestIPMessage_Args* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(num_ipv4_, other->num_ipv4_);
    std::swap(num_ipv6_, other->num_ipv6_);
    std::swap(uid_, other->uid_);
    netgroups_.Swap(&other->netgroups_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMRequestIPMessage_Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMRequestIPMessage_Args_descriptor_;
  metadata.reflection = IPAMRequestIPMessage_Args_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* IPAMRequestIPMessage::_default_command_ = NULL;
#ifndef _MSC_VER
const int IPAMRequestIPMessage::kCommandFieldNumber;
const int IPAMRequestIPMessage::kArgsFieldNumber;
#endif  // !_MSC_VER

IPAMRequestIPMessage::IPAMRequestIPMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMRequestIPMessage::InitAsDefaultInstance() {
  args_ = const_cast< ::network_isolator::IPAMRequestIPMessage_Args*>(&::network_isolator::IPAMRequestIPMessage_Args::default_instance());
}

IPAMRequestIPMessage::IPAMRequestIPMessage(const IPAMRequestIPMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMRequestIPMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMRequestIPMessage::~IPAMRequestIPMessage() {
  SharedDtor();
}

void IPAMRequestIPMessage::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete args_;
  }
}

void IPAMRequestIPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMRequestIPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMRequestIPMessage_descriptor_;
}

const IPAMRequestIPMessage& IPAMRequestIPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMRequestIPMessage* IPAMRequestIPMessage::default_instance_ = NULL;

IPAMRequestIPMessage* IPAMRequestIPMessage::New() const {
  return new IPAMRequestIPMessage;
}

void IPAMRequestIPMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
    if (has_args()) {
      if (args_ != NULL) args_->::network_isolator::IPAMRequestIPMessage_Args::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMRequestIPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "allocate"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required .network_isolator.IPAMRequestIPMessage.Args args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMRequestIPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "allocate"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // required .network_isolator.IPAMRequestIPMessage.Args args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMRequestIPMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "allocate"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // required .network_isolator.IPAMRequestIPMessage.Args args = 2;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMRequestIPMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "allocate"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required .network_isolator.IPAMRequestIPMessage.Args args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMRequestIPMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMRequestIPMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMRequestIPMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMRequestIPMessage::MergeFrom(const IPAMRequestIPMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_args()) {
      mutable_args()->::network_isolator::IPAMRequestIPMessage_Args::MergeFrom(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMRequestIPMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMRequestIPMessage::CopyFrom(const IPAMRequestIPMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMRequestIPMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_args()) {
    if (!this->args().IsInitialized()) return false;
  }
  return true;
}

void IPAMRequestIPMessage::Swap(IPAMRequestIPMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMRequestIPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMRequestIPMessage_descriptor_;
  metadata.reflection = IPAMRequestIPMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPAMReserveIPMessage_Args::kHostnameFieldNumber;
const int IPAMReserveIPMessage_Args::kIpv4AddrsFieldNumber;
const int IPAMReserveIPMessage_Args::kIpv6AddrsFieldNumber;
const int IPAMReserveIPMessage_Args::kUidFieldNumber;
const int IPAMReserveIPMessage_Args::kNetgroupsFieldNumber;
const int IPAMReserveIPMessage_Args::kLabelsFieldNumber;
#endif  // !_MSC_VER

IPAMReserveIPMessage_Args::IPAMReserveIPMessage_Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMReserveIPMessage_Args::InitAsDefaultInstance() {
}

IPAMReserveIPMessage_Args::IPAMReserveIPMessage_Args(const IPAMReserveIPMessage_Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMReserveIPMessage_Args::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMReserveIPMessage_Args::~IPAMReserveIPMessage_Args() {
  SharedDtor();
}

void IPAMReserveIPMessage_Args::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void IPAMReserveIPMessage_Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMReserveIPMessage_Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMReserveIPMessage_Args_descriptor_;
}

const IPAMReserveIPMessage_Args& IPAMReserveIPMessage_Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMReserveIPMessage_Args* IPAMReserveIPMessage_Args::default_instance_ = NULL;

IPAMReserveIPMessage_Args* IPAMReserveIPMessage_Args::New() const {
  return new IPAMReserveIPMessage_Args;
}

void IPAMReserveIPMessage_Args::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ipv4_addrs_.Clear();
  ipv6_addrs_.Clear();
  netgroups_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMReserveIPMessage_Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipv4_addrs;
        break;
      }

      // repeated string ipv4_addrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv4_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv4_addrs(this->ipv4_addrs_size() - 1).data(),
            this->ipv4_addrs(this->ipv4_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipv4_addrs;
        if (input->ExpectTag(26)) goto parse_ipv6_addrs;
        break;
      }

      // repeated string ipv6_addrs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv6_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv6_addrs(this->ipv6_addrs_size() - 1).data(),
            this->ipv6_addrs(this->ipv6_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv6_addrs;
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // required string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_netgroups;
        break;
      }

      // repeated string netgroups = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netgroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_netgroups()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netgroups(this->netgroups_size() - 1).data(),
            this->netgroups(this->netgroups_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_netgroups;
        if (input->ExpectTag(50)) goto parse_labels;
        break;
      }

      // repeated .mesos.Label labels = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMReserveIPMessage_Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // repeated string ipv4_addrs = 2;
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv4_addrs(i).data(), this->ipv4_addrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ipv4_addrs(i), output);
  }

  // repeated string ipv6_addrs = 3;
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv6_addrs(i).data(), this->ipv6_addrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ipv6_addrs(i), output);
  }

  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }

  // repeated string netgroups = 5;
  for (int i = 0; i < this->netgroups_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->netgroups(i).data(), this->netgroups(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->netgroups(i), output);
  }

  // repeated .mesos.Label labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMReserveIPMessage_Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // repeated string ipv4_addrs = 2;
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv4_addrs(i).data(), this->ipv4_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ipv4_addrs(i), target);
  }

  // repeated string ipv6_addrs = 3;
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv6_addrs(i).data(), this->ipv6_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ipv6_addrs(i), target);
  }

  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // repeated string netgroups = 5;
  for (int i = 0; i < this->netgroups_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netgroups(i).data(), this->netgroups(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->netgroups(i), target);
  }

  // repeated .mesos.Label labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMReserveIPMessage_Args::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  // repeated string ipv4_addrs = 2;
  total_size += 1 * this->ipv4_addrs_size();
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv4_addrs(i));
  }

  // repeated string ipv6_addrs = 3;
  total_size += 1 * this->ipv6_addrs_size();
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv6_addrs(i));
  }

  // repeated string netgroups = 5;
  total_size += 1 * this->netgroups_size();
  for (int i = 0; i < this->netgroups_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->netgroups(i));
  }

  // repeated .mesos.Label labels = 6;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMReserveIPMessage_Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMReserveIPMessage_Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMReserveIPMessage_Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMReserveIPMessage_Args::MergeFrom(const IPAMReserveIPMessage_Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv4_addrs_.MergeFrom(from.ipv4_addrs_);
  ipv6_addrs_.MergeFrom(from.ipv6_addrs_);
  netgroups_.MergeFrom(from.netgroups_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMReserveIPMessage_Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMReserveIPMessage_Args::CopyFrom(const IPAMReserveIPMessage_Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMReserveIPMessage_Args::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  return true;
}

void IPAMReserveIPMessage_Args::Swap(IPAMReserveIPMessage_Args* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    ipv4_addrs_.Swap(&other->ipv4_addrs_);
    ipv6_addrs_.Swap(&other->ipv6_addrs_);
    std::swap(uid_, other->uid_);
    netgroups_.Swap(&other->netgroups_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMReserveIPMessage_Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMReserveIPMessage_Args_descriptor_;
  metadata.reflection = IPAMReserveIPMessage_Args_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* IPAMReserveIPMessage::_default_command_ = NULL;
#ifndef _MSC_VER
const int IPAMReserveIPMessage::kCommandFieldNumber;
const int IPAMReserveIPMessage::kArgsFieldNumber;
#endif  // !_MSC_VER

IPAMReserveIPMessage::IPAMReserveIPMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMReserveIPMessage::InitAsDefaultInstance() {
  args_ = const_cast< ::network_isolator::IPAMReserveIPMessage_Args*>(&::network_isolator::IPAMReserveIPMessage_Args::default_instance());
}

IPAMReserveIPMessage::IPAMReserveIPMessage(const IPAMReserveIPMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMReserveIPMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMReserveIPMessage::~IPAMReserveIPMessage() {
  SharedDtor();
}

void IPAMReserveIPMessage::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete args_;
  }
}

void IPAMReserveIPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMReserveIPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMReserveIPMessage_descriptor_;
}

const IPAMReserveIPMessage& IPAMReserveIPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMReserveIPMessage* IPAMReserveIPMessage::default_instance_ = NULL;

IPAMReserveIPMessage* IPAMReserveIPMessage::New() const {
  return new IPAMReserveIPMessage;
}

void IPAMReserveIPMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
    if (has_args()) {
      if (args_ != NULL) args_->::network_isolator::IPAMReserveIPMessage_Args::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMReserveIPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "reserve"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required .network_isolator.IPAMReserveIPMessage.Args args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMReserveIPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "reserve"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // required .network_isolator.IPAMReserveIPMessage.Args args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMReserveIPMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "reserve"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // required .network_isolator.IPAMReserveIPMessage.Args args = 2;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMReserveIPMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "reserve"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required .network_isolator.IPAMReserveIPMessage.Args args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMReserveIPMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMReserveIPMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMReserveIPMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMReserveIPMessage::MergeFrom(const IPAMReserveIPMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_args()) {
      mutable_args()->::network_isolator::IPAMReserveIPMessage_Args::MergeFrom(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMReserveIPMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMReserveIPMessage::CopyFrom(const IPAMReserveIPMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMReserveIPMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_args()) {
    if (!this->args().IsInitialized()) return false;
  }
  return true;
}

void IPAMReserveIPMessage::Swap(IPAMReserveIPMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMReserveIPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMReserveIPMessage_descriptor_;
  metadata.reflection = IPAMReserveIPMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPAMReleaseIPMessage_Args::kIpsFieldNumber;
const int IPAMReleaseIPMessage_Args::kUidFieldNumber;
#endif  // !_MSC_VER

IPAMReleaseIPMessage_Args::IPAMReleaseIPMessage_Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMReleaseIPMessage_Args::InitAsDefaultInstance() {
}

IPAMReleaseIPMessage_Args::IPAMReleaseIPMessage_Args(const IPAMReleaseIPMessage_Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMReleaseIPMessage_Args::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMReleaseIPMessage_Args::~IPAMReleaseIPMessage_Args() {
  SharedDtor();
}

void IPAMReleaseIPMessage_Args::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void IPAMReleaseIPMessage_Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMReleaseIPMessage_Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMReleaseIPMessage_Args_descriptor_;
}

const IPAMReleaseIPMessage_Args& IPAMReleaseIPMessage_Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMReleaseIPMessage_Args* IPAMReleaseIPMessage_Args::default_instance_ = NULL;

IPAMReleaseIPMessage_Args* IPAMReleaseIPMessage_Args::New() const {
  return new IPAMReleaseIPMessage_Args;
}

void IPAMReleaseIPMessage_Args::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMReleaseIPMessage_Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ips;
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMReleaseIPMessage_Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string ips = 1;
  for (int i = 0; i < this->ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ips(i).data(), this->ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ips(i), output);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMReleaseIPMessage_Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string ips = 1;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ips(i), target);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMReleaseIPMessage_Args::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  // repeated string ips = 1;
  total_size += 1 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMReleaseIPMessage_Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMReleaseIPMessage_Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMReleaseIPMessage_Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMReleaseIPMessage_Args::MergeFrom(const IPAMReleaseIPMessage_Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMReleaseIPMessage_Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMReleaseIPMessage_Args::CopyFrom(const IPAMReleaseIPMessage_Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMReleaseIPMessage_Args::IsInitialized() const {

  return true;
}

void IPAMReleaseIPMessage_Args::Swap(IPAMReleaseIPMessage_Args* other) {
  if (other != this) {
    ips_.Swap(&other->ips_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMReleaseIPMessage_Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMReleaseIPMessage_Args_descriptor_;
  metadata.reflection = IPAMReleaseIPMessage_Args_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* IPAMReleaseIPMessage::_default_command_ = NULL;
#ifndef _MSC_VER
const int IPAMReleaseIPMessage::kCommandFieldNumber;
const int IPAMReleaseIPMessage::kArgsFieldNumber;
#endif  // !_MSC_VER

IPAMReleaseIPMessage::IPAMReleaseIPMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMReleaseIPMessage::InitAsDefaultInstance() {
  args_ = const_cast< ::network_isolator::IPAMReleaseIPMessage_Args*>(&::network_isolator::IPAMReleaseIPMessage_Args::default_instance());
}

IPAMReleaseIPMessage::IPAMReleaseIPMessage(const IPAMReleaseIPMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMReleaseIPMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMReleaseIPMessage::~IPAMReleaseIPMessage() {
  SharedDtor();
}

void IPAMReleaseIPMessage::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete args_;
  }
}

void IPAMReleaseIPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMReleaseIPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMReleaseIPMessage_descriptor_;
}

const IPAMReleaseIPMessage& IPAMReleaseIPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMReleaseIPMessage* IPAMReleaseIPMessage::default_instance_ = NULL;

IPAMReleaseIPMessage* IPAMReleaseIPMessage::New() const {
  return new IPAMReleaseIPMessage;
}

void IPAMReleaseIPMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
    if (has_args()) {
      if (args_ != NULL) args_->::network_isolator::IPAMReleaseIPMessage_Args::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMReleaseIPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "release"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required .network_isolator.IPAMReleaseIPMessage.Args args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMReleaseIPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "release"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // required .network_isolator.IPAMReleaseIPMessage.Args args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMReleaseIPMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "release"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // required .network_isolator.IPAMReleaseIPMessage.Args args = 2;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMReleaseIPMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "release"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required .network_isolator.IPAMReleaseIPMessage.Args args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMReleaseIPMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMReleaseIPMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMReleaseIPMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMReleaseIPMessage::MergeFrom(const IPAMReleaseIPMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_args()) {
      mutable_args()->::network_isolator::IPAMReleaseIPMessage_Args::MergeFrom(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMReleaseIPMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMReleaseIPMessage::CopyFrom(const IPAMReleaseIPMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMReleaseIPMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IPAMReleaseIPMessage::Swap(IPAMReleaseIPMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMReleaseIPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMReleaseIPMessage_descriptor_;
  metadata.reflection = IPAMReleaseIPMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPAMResponse::kIpv4FieldNumber;
const int IPAMResponse::kIpv6FieldNumber;
const int IPAMResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

IPAMResponse::IPAMResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAMResponse::InitAsDefaultInstance() {
}

IPAMResponse::IPAMResponse(const IPAMResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAMResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAMResponse::~IPAMResponse() {
  SharedDtor();
}

void IPAMResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void IPAMResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAMResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAMResponse_descriptor_;
}

const IPAMResponse& IPAMResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IPAMResponse* IPAMResponse::default_instance_ = NULL;

IPAMResponse* IPAMResponse::New() const {
  return new IPAMResponse;
}

void IPAMResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ipv4_.Clear();
  ipv6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAMResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ipv4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv4(this->ipv4_size() - 1).data(),
            this->ipv4(this->ipv4_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ipv4;
        if (input->ExpectTag(18)) goto parse_ipv6;
        break;
      }

      // repeated string ipv6 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv6(this->ipv6_size() - 1).data(),
            this->ipv6(this->ipv6_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipv6;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAMResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string ipv4 = 1;
  for (int i = 0; i < this->ipv4_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv4(i).data(), this->ipv4(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ipv4(i), output);
  }

  // repeated string ipv6 = 2;
  for (int i = 0; i < this->ipv6_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv6(i).data(), this->ipv6(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ipv6(i), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAMResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string ipv4 = 1;
  for (int i = 0; i < this->ipv4_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv4(i).data(), this->ipv4(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ipv4(i), target);
  }

  // repeated string ipv6 = 2;
  for (int i = 0; i < this->ipv6_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv6(i).data(), this->ipv6(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ipv6(i), target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAMResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  // repeated string ipv4 = 1;
  total_size += 1 * this->ipv4_size();
  for (int i = 0; i < this->ipv4_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv4(i));
  }

  // repeated string ipv6 = 2;
  total_size += 1 * this->ipv6_size();
  for (int i = 0; i < this->ipv6_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv6(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAMResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAMResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAMResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAMResponse::MergeFrom(const IPAMResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv4_.MergeFrom(from.ipv4_);
  ipv6_.MergeFrom(from.ipv6_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAMResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMResponse::CopyFrom(const IPAMResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMResponse::IsInitialized() const {

  return true;
}

void IPAMResponse::Swap(IPAMResponse* other) {
  if (other != this) {
    ipv4_.Swap(&other->ipv4_);
    ipv6_.Swap(&other->ipv6_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAMResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAMResponse_descriptor_;
  metadata.reflection = IPAMResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsolatorIsolateMessage_Args::kHostnameFieldNumber;
const int IsolatorIsolateMessage_Args::kContainerIdFieldNumber;
const int IsolatorIsolateMessage_Args::kPidFieldNumber;
const int IsolatorIsolateMessage_Args::kIpv4AddrsFieldNumber;
const int IsolatorIsolateMessage_Args::kIpv6AddrsFieldNumber;
const int IsolatorIsolateMessage_Args::kNetgroupsFieldNumber;
const int IsolatorIsolateMessage_Args::kLabelsFieldNumber;
#endif  // !_MSC_VER

IsolatorIsolateMessage_Args::IsolatorIsolateMessage_Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorIsolateMessage_Args::InitAsDefaultInstance() {
}

IsolatorIsolateMessage_Args::IsolatorIsolateMessage_Args(const IsolatorIsolateMessage_Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorIsolateMessage_Args::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  container_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorIsolateMessage_Args::~IsolatorIsolateMessage_Args() {
  SharedDtor();
}

void IsolatorIsolateMessage_Args::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (container_id_ != &::google::protobuf::internal::kEmptyString) {
    delete container_id_;
  }
  if (this != default_instance_) {
  }
}

void IsolatorIsolateMessage_Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorIsolateMessage_Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorIsolateMessage_Args_descriptor_;
}

const IsolatorIsolateMessage_Args& IsolatorIsolateMessage_Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorIsolateMessage_Args* IsolatorIsolateMessage_Args::default_instance_ = NULL;

IsolatorIsolateMessage_Args* IsolatorIsolateMessage_Args::New() const {
  return new IsolatorIsolateMessage_Args;
}

void IsolatorIsolateMessage_Args::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_container_id()) {
      if (container_id_ != &::google::protobuf::internal::kEmptyString) {
        container_id_->clear();
      }
    }
    pid_ = 0u;
  }
  ipv4_addrs_.Clear();
  ipv6_addrs_.Clear();
  netgroups_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorIsolateMessage_Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_id;
        break;
      }

      // required string container_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required uint32 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipv4_addrs;
        break;
      }

      // repeated string ipv4_addrs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv4_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv4_addrs(this->ipv4_addrs_size() - 1).data(),
            this->ipv4_addrs(this->ipv4_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipv4_addrs;
        if (input->ExpectTag(42)) goto parse_ipv6_addrs;
        break;
      }

      // repeated string ipv6_addrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv6_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv6_addrs(this->ipv6_addrs_size() - 1).data(),
            this->ipv6_addrs(this->ipv6_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ipv6_addrs;
        if (input->ExpectTag(50)) goto parse_netgroups;
        break;
      }

      // repeated string netgroups = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netgroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_netgroups()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netgroups(this->netgroups_size() - 1).data(),
            this->netgroups(this->netgroups_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_netgroups;
        if (input->ExpectTag(58)) goto parse_labels;
        break;
      }

      // repeated .mesos.Label labels = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorIsolateMessage_Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // required string container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->container_id(), output);
  }

  // required uint32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pid(), output);
  }

  // repeated string ipv4_addrs = 4;
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv4_addrs(i).data(), this->ipv4_addrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ipv4_addrs(i), output);
  }

  // repeated string ipv6_addrs = 5;
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv6_addrs(i).data(), this->ipv6_addrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ipv6_addrs(i), output);
  }

  // repeated string netgroups = 6;
  for (int i = 0; i < this->netgroups_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->netgroups(i).data(), this->netgroups(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->netgroups(i), output);
  }

  // repeated .mesos.Label labels = 7;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorIsolateMessage_Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required string container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->container_id(), target);
  }

  // required uint32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pid(), target);
  }

  // repeated string ipv4_addrs = 4;
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv4_addrs(i).data(), this->ipv4_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ipv4_addrs(i), target);
  }

  // repeated string ipv6_addrs = 5;
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv6_addrs(i).data(), this->ipv6_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->ipv6_addrs(i), target);
  }

  // repeated string netgroups = 6;
  for (int i = 0; i < this->netgroups_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netgroups(i).data(), this->netgroups(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->netgroups(i), target);
  }

  // repeated .mesos.Label labels = 7;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorIsolateMessage_Args::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string container_id = 2;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container_id());
    }

    // required uint32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

  }
  // repeated string ipv4_addrs = 4;
  total_size += 1 * this->ipv4_addrs_size();
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv4_addrs(i));
  }

  // repeated string ipv6_addrs = 5;
  total_size += 1 * this->ipv6_addrs_size();
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv6_addrs(i));
  }

  // repeated string netgroups = 6;
  total_size += 1 * this->netgroups_size();
  for (int i = 0; i < this->netgroups_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->netgroups(i));
  }

  // repeated .mesos.Label labels = 7;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorIsolateMessage_Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorIsolateMessage_Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorIsolateMessage_Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorIsolateMessage_Args::MergeFrom(const IsolatorIsolateMessage_Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv4_addrs_.MergeFrom(from.ipv4_addrs_);
  ipv6_addrs_.MergeFrom(from.ipv6_addrs_);
  netgroups_.MergeFrom(from.netgroups_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorIsolateMessage_Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorIsolateMessage_Args::CopyFrom(const IsolatorIsolateMessage_Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorIsolateMessage_Args::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  return true;
}

void IsolatorIsolateMessage_Args::Swap(IsolatorIsolateMessage_Args* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(container_id_, other->container_id_);
    std::swap(pid_, other->pid_);
    ipv4_addrs_.Swap(&other->ipv4_addrs_);
    ipv6_addrs_.Swap(&other->ipv6_addrs_);
    netgroups_.Swap(&other->netgroups_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorIsolateMessage_Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorIsolateMessage_Args_descriptor_;
  metadata.reflection = IsolatorIsolateMessage_Args_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* IsolatorIsolateMessage::_default_command_ = NULL;
#ifndef _MSC_VER
const int IsolatorIsolateMessage::kCommandFieldNumber;
const int IsolatorIsolateMessage::kArgsFieldNumber;
#endif  // !_MSC_VER

IsolatorIsolateMessage::IsolatorIsolateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorIsolateMessage::InitAsDefaultInstance() {
  args_ = const_cast< ::network_isolator::IsolatorIsolateMessage_Args*>(&::network_isolator::IsolatorIsolateMessage_Args::default_instance());
}

IsolatorIsolateMessage::IsolatorIsolateMessage(const IsolatorIsolateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorIsolateMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorIsolateMessage::~IsolatorIsolateMessage() {
  SharedDtor();
}

void IsolatorIsolateMessage::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete args_;
  }
}

void IsolatorIsolateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorIsolateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorIsolateMessage_descriptor_;
}

const IsolatorIsolateMessage& IsolatorIsolateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorIsolateMessage* IsolatorIsolateMessage::default_instance_ = NULL;

IsolatorIsolateMessage* IsolatorIsolateMessage::New() const {
  return new IsolatorIsolateMessage;
}

void IsolatorIsolateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
    if (has_args()) {
      if (args_ != NULL) args_->::network_isolator::IsolatorIsolateMessage_Args::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorIsolateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "isolate"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required .network_isolator.IsolatorIsolateMessage.Args args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorIsolateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "isolate"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // required .network_isolator.IsolatorIsolateMessage.Args args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorIsolateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "isolate"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // required .network_isolator.IsolatorIsolateMessage.Args args = 2;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorIsolateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "isolate"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required .network_isolator.IsolatorIsolateMessage.Args args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorIsolateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorIsolateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorIsolateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorIsolateMessage::MergeFrom(const IsolatorIsolateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_args()) {
      mutable_args()->::network_isolator::IsolatorIsolateMessage_Args::MergeFrom(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorIsolateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorIsolateMessage::CopyFrom(const IsolatorIsolateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorIsolateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_args()) {
    if (!this->args().IsInitialized()) return false;
  }
  return true;
}

void IsolatorIsolateMessage::Swap(IsolatorIsolateMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorIsolateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorIsolateMessage_descriptor_;
  metadata.reflection = IsolatorIsolateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsolatorCleanupMessage_Args::kHostnameFieldNumber;
const int IsolatorCleanupMessage_Args::kContainerIdFieldNumber;
#endif  // !_MSC_VER

IsolatorCleanupMessage_Args::IsolatorCleanupMessage_Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorCleanupMessage_Args::InitAsDefaultInstance() {
}

IsolatorCleanupMessage_Args::IsolatorCleanupMessage_Args(const IsolatorCleanupMessage_Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorCleanupMessage_Args::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  container_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorCleanupMessage_Args::~IsolatorCleanupMessage_Args() {
  SharedDtor();
}

void IsolatorCleanupMessage_Args::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (container_id_ != &::google::protobuf::internal::kEmptyString) {
    delete container_id_;
  }
  if (this != default_instance_) {
  }
}

void IsolatorCleanupMessage_Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorCleanupMessage_Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorCleanupMessage_Args_descriptor_;
}

const IsolatorCleanupMessage_Args& IsolatorCleanupMessage_Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorCleanupMessage_Args* IsolatorCleanupMessage_Args::default_instance_ = NULL;

IsolatorCleanupMessage_Args* IsolatorCleanupMessage_Args::New() const {
  return new IsolatorCleanupMessage_Args;
}

void IsolatorCleanupMessage_Args::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_container_id()) {
      if (container_id_ != &::google::protobuf::internal::kEmptyString) {
        container_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorCleanupMessage_Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_id;
        break;
      }

      // required string container_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorCleanupMessage_Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // required string container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->container_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorCleanupMessage_Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required string container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->container_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorCleanupMessage_Args::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string container_id = 2;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorCleanupMessage_Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorCleanupMessage_Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorCleanupMessage_Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorCleanupMessage_Args::MergeFrom(const IsolatorCleanupMessage_Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorCleanupMessage_Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorCleanupMessage_Args::CopyFrom(const IsolatorCleanupMessage_Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorCleanupMessage_Args::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IsolatorCleanupMessage_Args::Swap(IsolatorCleanupMessage_Args* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(container_id_, other->container_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorCleanupMessage_Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorCleanupMessage_Args_descriptor_;
  metadata.reflection = IsolatorCleanupMessage_Args_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* IsolatorCleanupMessage::_default_command_ = NULL;
#ifndef _MSC_VER
const int IsolatorCleanupMessage::kCommandFieldNumber;
const int IsolatorCleanupMessage::kArgsFieldNumber;
#endif  // !_MSC_VER

IsolatorCleanupMessage::IsolatorCleanupMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorCleanupMessage::InitAsDefaultInstance() {
  args_ = const_cast< ::network_isolator::IsolatorCleanupMessage_Args*>(&::network_isolator::IsolatorCleanupMessage_Args::default_instance());
}

IsolatorCleanupMessage::IsolatorCleanupMessage(const IsolatorCleanupMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorCleanupMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorCleanupMessage::~IsolatorCleanupMessage() {
  SharedDtor();
}

void IsolatorCleanupMessage::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete args_;
  }
}

void IsolatorCleanupMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorCleanupMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorCleanupMessage_descriptor_;
}

const IsolatorCleanupMessage& IsolatorCleanupMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorCleanupMessage* IsolatorCleanupMessage::default_instance_ = NULL;

IsolatorCleanupMessage* IsolatorCleanupMessage::New() const {
  return new IsolatorCleanupMessage;
}

void IsolatorCleanupMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
    if (has_args()) {
      if (args_ != NULL) args_->::network_isolator::IsolatorCleanupMessage_Args::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorCleanupMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "cleanup"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required .network_isolator.IsolatorCleanupMessage.Args args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorCleanupMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "cleanup"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // required .network_isolator.IsolatorCleanupMessage.Args args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorCleanupMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "cleanup"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // required .network_isolator.IsolatorCleanupMessage.Args args = 2;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorCleanupMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "cleanup"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required .network_isolator.IsolatorCleanupMessage.Args args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorCleanupMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorCleanupMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorCleanupMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorCleanupMessage::MergeFrom(const IsolatorCleanupMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_args()) {
      mutable_args()->::network_isolator::IsolatorCleanupMessage_Args::MergeFrom(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorCleanupMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorCleanupMessage::CopyFrom(const IsolatorCleanupMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorCleanupMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_args()) {
    if (!this->args().IsInitialized()) return false;
  }
  return true;
}

void IsolatorCleanupMessage::Swap(IsolatorCleanupMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorCleanupMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorCleanupMessage_descriptor_;
  metadata.reflection = IsolatorCleanupMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsolatorMessage_Args::kHostnameFieldNumber;
const int IsolatorMessage_Args::kContainerIdFieldNumber;
const int IsolatorMessage_Args::kPidFieldNumber;
const int IsolatorMessage_Args::kIpv4AddrsFieldNumber;
const int IsolatorMessage_Args::kIpv6AddrsFieldNumber;
const int IsolatorMessage_Args::kNetgroupsFieldNumber;
const int IsolatorMessage_Args::kLabelsFieldNumber;
#endif  // !_MSC_VER

IsolatorMessage_Args::IsolatorMessage_Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorMessage_Args::InitAsDefaultInstance() {
}

IsolatorMessage_Args::IsolatorMessage_Args(const IsolatorMessage_Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorMessage_Args::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  container_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorMessage_Args::~IsolatorMessage_Args() {
  SharedDtor();
}

void IsolatorMessage_Args::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (container_id_ != &::google::protobuf::internal::kEmptyString) {
    delete container_id_;
  }
  if (this != default_instance_) {
  }
}

void IsolatorMessage_Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorMessage_Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorMessage_Args_descriptor_;
}

const IsolatorMessage_Args& IsolatorMessage_Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorMessage_Args* IsolatorMessage_Args::default_instance_ = NULL;

IsolatorMessage_Args* IsolatorMessage_Args::New() const {
  return new IsolatorMessage_Args;
}

void IsolatorMessage_Args::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_container_id()) {
      if (container_id_ != &::google::protobuf::internal::kEmptyString) {
        container_id_->clear();
      }
    }
    pid_ = 0;
  }
  ipv4_addrs_.Clear();
  ipv6_addrs_.Clear();
  netgroups_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorMessage_Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_id;
        break;
      }

      // required string container_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required int32 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipv4_addrs;
        break;
      }

      // repeated string ipv4_addrs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv4_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv4_addrs(this->ipv4_addrs_size() - 1).data(),
            this->ipv4_addrs(this->ipv4_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipv4_addrs;
        if (input->ExpectTag(42)) goto parse_ipv6_addrs;
        break;
      }

      // repeated string ipv6_addrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv6_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv6_addrs(this->ipv6_addrs_size() - 1).data(),
            this->ipv6_addrs(this->ipv6_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ipv6_addrs;
        if (input->ExpectTag(50)) goto parse_netgroups;
        break;
      }

      // repeated string netgroups = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netgroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_netgroups()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netgroups(this->netgroups_size() - 1).data(),
            this->netgroups(this->netgroups_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_netgroups;
        if (input->ExpectTag(58)) goto parse_labels;
        break;
      }

      // repeated .mesos.Label labels = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorMessage_Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // required string container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->container_id(), output);
  }

  // required int32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // repeated string ipv4_addrs = 4;
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv4_addrs(i).data(), this->ipv4_addrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ipv4_addrs(i), output);
  }

  // repeated string ipv6_addrs = 5;
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv6_addrs(i).data(), this->ipv6_addrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ipv6_addrs(i), output);
  }

  // repeated string netgroups = 6;
  for (int i = 0; i < this->netgroups_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->netgroups(i).data(), this->netgroups(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->netgroups(i), output);
  }

  // repeated .mesos.Label labels = 7;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorMessage_Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required string container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->container_id(), target);
  }

  // required int32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }

  // repeated string ipv4_addrs = 4;
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv4_addrs(i).data(), this->ipv4_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ipv4_addrs(i), target);
  }

  // repeated string ipv6_addrs = 5;
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv6_addrs(i).data(), this->ipv6_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->ipv6_addrs(i), target);
  }

  // repeated string netgroups = 6;
  for (int i = 0; i < this->netgroups_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netgroups(i).data(), this->netgroups(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->netgroups(i), target);
  }

  // repeated .mesos.Label labels = 7;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorMessage_Args::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string container_id = 2;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container_id());
    }

    // required int32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  // repeated string ipv4_addrs = 4;
  total_size += 1 * this->ipv4_addrs_size();
  for (int i = 0; i < this->ipv4_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv4_addrs(i));
  }

  // repeated string ipv6_addrs = 5;
  total_size += 1 * this->ipv6_addrs_size();
  for (int i = 0; i < this->ipv6_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv6_addrs(i));
  }

  // repeated string netgroups = 6;
  total_size += 1 * this->netgroups_size();
  for (int i = 0; i < this->netgroups_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->netgroups(i));
  }

  // repeated .mesos.Label labels = 7;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorMessage_Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorMessage_Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorMessage_Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorMessage_Args::MergeFrom(const IsolatorMessage_Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv4_addrs_.MergeFrom(from.ipv4_addrs_);
  ipv6_addrs_.MergeFrom(from.ipv6_addrs_);
  netgroups_.MergeFrom(from.netgroups_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorMessage_Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorMessage_Args::CopyFrom(const IsolatorMessage_Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorMessage_Args::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  return true;
}

void IsolatorMessage_Args::Swap(IsolatorMessage_Args* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(container_id_, other->container_id_);
    std::swap(pid_, other->pid_);
    ipv4_addrs_.Swap(&other->ipv4_addrs_);
    ipv6_addrs_.Swap(&other->ipv6_addrs_);
    netgroups_.Swap(&other->netgroups_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorMessage_Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorMessage_Args_descriptor_;
  metadata.reflection = IsolatorMessage_Args_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* IsolatorMessage::_default_command_ = NULL;
#ifndef _MSC_VER
const int IsolatorMessage::kCommandFieldNumber;
const int IsolatorMessage::kArgsFieldNumber;
#endif  // !_MSC_VER

IsolatorMessage::IsolatorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorMessage::InitAsDefaultInstance() {
  args_ = const_cast< ::network_isolator::IsolatorMessage_Args*>(&::network_isolator::IsolatorMessage_Args::default_instance());
}

IsolatorMessage::IsolatorMessage(const IsolatorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorMessage::~IsolatorMessage() {
  SharedDtor();
}

void IsolatorMessage::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete args_;
  }
}

void IsolatorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorMessage_descriptor_;
}

const IsolatorMessage& IsolatorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorMessage* IsolatorMessage::default_instance_ = NULL;

IsolatorMessage* IsolatorMessage::New() const {
  return new IsolatorMessage;
}

void IsolatorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
    if (has_args()) {
      if (args_ != NULL) args_->::network_isolator::IsolatorMessage_Args::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "isolate"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required .network_isolator.IsolatorMessage.Args args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "isolate"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // required .network_isolator.IsolatorMessage.Args args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "isolate"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // required .network_isolator.IsolatorMessage.Args args = 2;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "isolate"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required .network_isolator.IsolatorMessage.Args args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorMessage::MergeFrom(const IsolatorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_args()) {
      mutable_args()->::network_isolator::IsolatorMessage_Args::MergeFrom(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorMessage::CopyFrom(const IsolatorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_args()) {
    if (!this->args().IsInitialized()) return false;
  }
  return true;
}

void IsolatorMessage::Swap(IsolatorMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorMessage_descriptor_;
  metadata.reflection = IsolatorMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsolatorResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

IsolatorResponse::IsolatorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsolatorResponse::InitAsDefaultInstance() {
}

IsolatorResponse::IsolatorResponse(const IsolatorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsolatorResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsolatorResponse::~IsolatorResponse() {
  SharedDtor();
}

void IsolatorResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void IsolatorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolatorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolatorResponse_descriptor_;
}

const IsolatorResponse& IsolatorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

IsolatorResponse* IsolatorResponse::default_instance_ = NULL;

IsolatorResponse* IsolatorResponse::New() const {
  return new IsolatorResponse;
}

void IsolatorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsolatorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsolatorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsolatorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsolatorResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolatorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsolatorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsolatorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsolatorResponse::MergeFrom(const IsolatorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsolatorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolatorResponse::CopyFrom(const IsolatorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolatorResponse::IsInitialized() const {

  return true;
}

void IsolatorResponse::Swap(IsolatorResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsolatorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsolatorResponse_descriptor_;
  metadata.reflection = IsolatorResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network_isolator

// @@protoc_insertion_point(global_scope)
